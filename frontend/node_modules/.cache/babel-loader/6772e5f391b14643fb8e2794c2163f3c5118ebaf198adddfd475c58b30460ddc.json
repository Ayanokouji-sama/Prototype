{"ast":null,"code":"const API_BASE_URL = '/api';\nasync function makeRequest(endpoint, options = {}) {\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    });\n    const responseData = await response.json();\n    if (!response.ok) {\n      console.error('API Error Response:', responseData);\n      // Pass the backend's error message to the component\n      throw responseData;\n    }\n    return responseData;\n  } catch (error) {\n    console.error('API request failed:', error);\n    // Re-throw the error so the component's catch block can handle it\n    throw error;\n  }\n}\nexport const submitQuestionnaire = async userData => {\n  return makeRequest('/submit_questionnaire/', {\n    method: 'POST',\n    body: JSON.stringify(userData)\n  });\n};\nexport const sendMessage = async (message, sessionId) => {\n  return makeRequest('/send_message/', {\n    method: 'POST',\n    body: JSON.stringify({\n      message: message,\n      session_id: sessionId\n    })\n  });\n};\nexport const getChatHistory = async sessionId => {\n  return makeRequest(`/get_chat_history/${sessionId}/`);\n};","map":{"version":3,"names":["API_BASE_URL","makeRequest","endpoint","options","response","fetch","headers","responseData","json","ok","console","error","submitQuestionnaire","userData","method","body","JSON","stringify","sendMessage","message","sessionId","session_id","getChatHistory"],"sources":["F:/gemini/counseling-ai-app/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = '/api';\r\n\r\nasync function makeRequest(endpoint, options = {}) {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n      headers: { 'Content-Type': 'application/json', ...options.headers },\r\n      ...options,\r\n    });\r\n    const responseData = await response.json();\r\n    if (!response.ok) {\r\n      console.error('API Error Response:', responseData);\r\n      // Pass the backend's error message to the component\r\n      throw responseData; \r\n    }\r\n    return responseData;\r\n  } catch (error) {\r\n    console.error('API request failed:', error);\r\n    // Re-throw the error so the component's catch block can handle it\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const submitQuestionnaire = async (userData) => {\r\n  return makeRequest('/submit_questionnaire/', {\r\n    method: 'POST',\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\nexport const sendMessage = async (message, sessionId) => {\r\n  return makeRequest('/send_message/', {\r\n    method: 'POST',\r\n    body: JSON.stringify({ message: message, session_id: sessionId }),\r\n  });\r\n};\r\n\r\nexport const getChatHistory = async (sessionId) => {\r\n  return makeRequest(`/get_chat_history/${sessionId}/`);\r\n};\r\n\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,MAAM;AAE3B,eAAeC,WAAWA,CAACC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EACjD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,GAAGE,QAAQ,EAAE,EAAE;MACzDI,OAAO,EAAE;QAAE,cAAc,EAAE,kBAAkB;QAAE,GAAGH,OAAO,CAACG;MAAQ,CAAC;MACnE,GAAGH;IACL,CAAC,CAAC;IACF,MAAMI,YAAY,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC1C,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;MAChBC,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEJ,YAAY,CAAC;MAClD;MACA,MAAMA,YAAY;IACpB;IACA,OAAOA,YAAY;EACrB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C;IACA,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,MAAMC,mBAAmB,GAAG,MAAOC,QAAQ,IAAK;EACrD,OAAOZ,WAAW,CAAC,wBAAwB,EAAE;IAC3Ca,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ;EAC/B,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMK,WAAW,GAAG,MAAAA,CAAOC,OAAO,EAAEC,SAAS,KAAK;EACvD,OAAOnB,WAAW,CAAC,gBAAgB,EAAE;IACnCa,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEE,OAAO,EAAEA,OAAO;MAAEE,UAAU,EAAED;IAAU,CAAC;EAClE,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAME,cAAc,GAAG,MAAOF,SAAS,IAAK;EACjD,OAAOnB,WAAW,CAAC,qBAAqBmB,SAAS,GAAG,CAAC;AACvD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
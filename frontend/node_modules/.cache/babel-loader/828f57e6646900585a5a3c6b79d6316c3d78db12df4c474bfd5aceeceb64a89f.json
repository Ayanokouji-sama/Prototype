{"ast":null,"code":"// Use relative URL since we have proxy configured in package.json\nconst API_BASE_URL = '/api';\nasync function makeRequest(endpoint, options = {}) {\n  try {\n    console.log('Making request to:', `${API_BASE_URL}${endpoint}`);\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    });\n    console.log('Response status:', response.status);\n    console.log('Response headers:', response.headers);\n\n    // Check if response is JSON\n    const contentType = response.headers.get('content-type');\n    if (!contentType || !contentType.includes('application/json')) {\n      const textResponse = await response.text();\n      console.error('Non-JSON response:', textResponse);\n      throw new Error(`Server returned non-JSON response: ${textResponse.substring(0, 100)}...`);\n    }\n    const responseData = await response.json();\n    if (!response.ok) {\n      console.error('API Error Response:', responseData);\n      throw responseData;\n    }\n    return responseData;\n  } catch (error) {\n    console.error('API request failed:', error);\n    throw error;\n  }\n}\nexport const submitQuestionnaire = async userData => {\n  return makeRequest('/submit_questionnaire/', {\n    method: 'POST',\n    body: JSON.stringify(userData)\n  });\n};\nexport const sendMessage = async (message, sessionId) => {\n  return makeRequest('/send_message/', {\n    method: 'POST',\n    body: JSON.stringify({\n      message: message,\n      session_id: sessionId\n    })\n  });\n};\nexport const getChatHistory = async sessionId => {\n  return makeRequest(`/get_chat_history/${sessionId}/`);\n};\nexport const uploadResume = async (file, sessionId) => {\n  // We use FormData to handle file uploads, which is different from JSON.\n  const formData = new FormData();\n  formData.append('resume', file); // 'resume' is the key the backend will look for.\n  formData.append('session_id', sessionId);\n  try {\n    console.log('Uploading file to:', `${API_BASE_URL}/resume/upload/`);\n\n    // We use a separate fetch call here because FormData handles its own headers.\n    const response = await fetch(`${API_BASE_URL}/resume/upload/`, {\n      method: 'POST',\n      body: formData\n    });\n    const responseData = await response.json();\n    if (!response.ok) {\n      console.error('API Error Response (File Upload):', responseData);\n      throw responseData;\n    }\n    return responseData;\n  } catch (error) {\n    console.error('File upload request failed:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","makeRequest","endpoint","options","console","log","response","fetch","headers","status","contentType","get","includes","textResponse","text","error","Error","substring","responseData","json","ok","submitQuestionnaire","userData","method","body","JSON","stringify","sendMessage","message","sessionId","session_id","getChatHistory","uploadResume","file","formData","FormData","append"],"sources":["F:/hackathon/counseling-ai-app/frontend/src/services/api.js"],"sourcesContent":["// Use relative URL since we have proxy configured in package.json\r\nconst API_BASE_URL = '/api';\r\n\r\nasync function makeRequest(endpoint, options = {}) {\r\n  try {\r\n    console.log('Making request to:', `${API_BASE_URL}${endpoint}`);\r\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n      headers: { 'Content-Type': 'application/json', ...options.headers },\r\n      ...options,\r\n    });\r\n    \r\n    console.log('Response status:', response.status);\r\n    console.log('Response headers:', response.headers);\r\n    \r\n    // Check if response is JSON\r\n    const contentType = response.headers.get('content-type');\r\n    if (!contentType || !contentType.includes('application/json')) {\r\n      const textResponse = await response.text();\r\n      console.error('Non-JSON response:', textResponse);\r\n      throw new Error(`Server returned non-JSON response: ${textResponse.substring(0, 100)}...`);\r\n    }\r\n    \r\n    const responseData = await response.json();\r\n    if (!response.ok) {\r\n      console.error('API Error Response:', responseData);\r\n      throw responseData; \r\n    }\r\n    return responseData;\r\n  } catch (error) {\r\n    console.error('API request failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const submitQuestionnaire = async (userData) => {\r\n  return makeRequest('/submit_questionnaire/', {\r\n    method: 'POST',\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\nexport const sendMessage = async (message, sessionId) => {\r\n  return makeRequest('/send_message/', {\r\n    method: 'POST',\r\n    body: JSON.stringify({ message: message, session_id: sessionId }),\r\n  });\r\n};\r\n\r\nexport const getChatHistory = async (sessionId) => {\r\n  return makeRequest(`/get_chat_history/${sessionId}/`);\r\n};\r\n\r\nexport const uploadResume = async (file, sessionId) => {\r\n  // We use FormData to handle file uploads, which is different from JSON.\r\n  const formData = new FormData();\r\n  formData.append('resume', file); // 'resume' is the key the backend will look for.\r\n  formData.append('session_id', sessionId);\r\n\r\n  try {\r\n    console.log('Uploading file to:', `${API_BASE_URL}/resume/upload/`);\r\n    \r\n    // We use a separate fetch call here because FormData handles its own headers.\r\n    const response = await fetch(`${API_BASE_URL}/resume/upload/`, {\r\n      method: 'POST',\r\n      body: formData,\r\n    });\r\n\r\n    const responseData = await response.json();\r\n    if (!response.ok) {\r\n      console.error('API Error Response (File Upload):', responseData);\r\n      throw responseData;\r\n    }\r\n    return responseData;\r\n\r\n  } catch (error) {\r\n    console.error('File upload request failed:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"F:\\\\gemini\\\\counseling-ai-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\n\nimport React, { useState } from 'react';\nimport Questionnaire from './components/Questionnaire';\nimport LoadingScreen from './components/LoadingScreen';\nimport ChatInterface from './components/ChatInterface';\nimport api from './services/api'; // Assuming your api service is exported from here\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State to control which component is visible\n  const [appState, setAppState] = useState('questionnaire'); // or 'loading', 'chat'\n\n  // State to hold the data for the chat interface\n  const [chatData, setChatData] = useState(null);\n\n  // This function will be passed to the Questionnaire\n  const handleQuestionnaireSubmit = async answers => {\n    // 1. IMMEDIATELY switch to the loading screen\n    setAppState('loading');\n    try {\n      // 2. Make the API call in the background.\n      // The UI is already on the LoadingScreen while this runs.\n      const response = await api.submitQuestionnaire(answers); // I've assumed a function name in your api.js\n\n      // 3. Store the response data for the chat interface\n      setChatData(response);\n\n      // 4. Once the data is back, switch to the chat interface\n      setAppState('chat');\n    } catch (error) {\n      console.error(\"Failed to submit questionnaire:\", error);\n      // Optional: Handle the error, maybe go back to the questionnaire\n      setAppState('questionnaire');\n      alert(\"There was an error submitting your answers. Please try again.\");\n    }\n  };\n\n  // Conditionally render the correct component based on the state\n  const renderComponent = () => {\n    switch (appState) {\n      case 'loading':\n        return /*#__PURE__*/_jsxDEV(LoadingScreen, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 16\n        }, this);\n      case 'chat':\n        return /*#__PURE__*/_jsxDEV(ChatInterface, {\n          initialData: chatData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 16\n        }, this);\n      case 'questionnaire':\n      default:\n        // Pass the handler function as a prop\n        return /*#__PURE__*/_jsxDEV(Questionnaire, {\n          onSubmit: handleQuestionnaireSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: renderComponent()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"uY2RcI7IK+Ff8asObqGz5c/oxBU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Questionnaire","LoadingScreen","ChatInterface","api","jsxDEV","_jsxDEV","App","_s","appState","setAppState","chatData","setChatData","handleQuestionnaireSubmit","answers","response","submitQuestionnaire","error","console","alert","renderComponent","fileName","_jsxFileName","lineNumber","columnNumber","initialData","onSubmit","className","children","_c","$RefreshReg$"],"sources":["F:/gemini/counseling-ai-app/frontend/src/App.js"],"sourcesContent":["// src/App.js\r\n\r\nimport React, { useState } from 'react';\r\nimport Questionnaire from './components/Questionnaire';\r\nimport LoadingScreen from './components/LoadingScreen';\r\nimport ChatInterface from './components/ChatInterface';\r\nimport api from './services/api'; // Assuming your api service is exported from here\r\n\r\nfunction App() {\r\n  // State to control which component is visible\r\n  const [appState, setAppState] = useState('questionnaire'); // or 'loading', 'chat'\r\n  \r\n  // State to hold the data for the chat interface\r\n  const [chatData, setChatData] = useState(null);\r\n\r\n  // This function will be passed to the Questionnaire\r\n  const handleQuestionnaireSubmit = async (answers) => {\r\n    // 1. IMMEDIATELY switch to the loading screen\r\n    setAppState('loading');\r\n\r\n    try {\r\n      // 2. Make the API call in the background.\r\n      // The UI is already on the LoadingScreen while this runs.\r\n      const response = await api.submitQuestionnaire(answers); // I've assumed a function name in your api.js\r\n      \r\n      // 3. Store the response data for the chat interface\r\n      setChatData(response);\r\n\r\n      // 4. Once the data is back, switch to the chat interface\r\n      setAppState('chat');\r\n\r\n    } catch (error) {\r\n      console.error(\"Failed to submit questionnaire:\", error);\r\n      // Optional: Handle the error, maybe go back to the questionnaire\r\n      setAppState('questionnaire');\r\n      alert(\"There was an error submitting your answers. Please try again.\");\r\n    }\r\n  };\r\n\r\n  // Conditionally render the correct component based on the state\r\n  const renderComponent = () => {\r\n    switch (appState) {\r\n      case 'loading':\r\n        return <LoadingScreen />;\r\n      case 'chat':\r\n        return <ChatInterface initialData={chatData} />;\r\n      case 'questionnaire':\r\n      default:\r\n        // Pass the handler function as a prop\r\n        return <Questionnaire onSubmit={handleQuestionnaireSubmit} />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {renderComponent()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,GAAG,MAAM,gBAAgB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC;;EAE3D;EACA,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAE9C;EACA,MAAMa,yBAAyB,GAAG,MAAOC,OAAO,IAAK;IACnD;IACAJ,WAAW,CAAC,SAAS,CAAC;IAEtB,IAAI;MACF;MACA;MACA,MAAMK,QAAQ,GAAG,MAAMX,GAAG,CAACY,mBAAmB,CAACF,OAAO,CAAC,CAAC,CAAC;;MAEzD;MACAF,WAAW,CAACG,QAAQ,CAAC;;MAErB;MACAL,WAAW,CAAC,MAAM,CAAC;IAErB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD;MACAP,WAAW,CAAC,eAAe,CAAC;MAC5BS,KAAK,CAAC,+DAA+D,CAAC;IACxE;EACF,CAAC;;EAED;EACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B,QAAQX,QAAQ;MACd,KAAK,SAAS;QACZ,oBAAOH,OAAA,CAACJ,aAAa;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAC1B,KAAK,MAAM;QACT,oBAAOlB,OAAA,CAACH,aAAa;UAACsB,WAAW,EAAEd;QAAS;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MACjD,KAAK,eAAe;MACpB;QACE;QACA,oBAAOlB,OAAA,CAACL,aAAa;UAACyB,QAAQ,EAAEb;QAA0B;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;IACjE;EACF,CAAC;EAED,oBACElB,OAAA;IAAKqB,SAAS,EAAC,KAAK;IAAAC,QAAA,EACjBR,eAAe,CAAC;EAAC;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEV;AAAChB,EAAA,CAlDQD,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AAoDZ,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}